import os
import pandas as pd
import subprocess
import json

# Function to get folder path from user
folder_path = input("Enter the folder path: ")

# Step 1: Walk through the folder and create a DataFrame with .tif and .bil file paths
file_paths = []
for root, dirs, files in os.walk(folder_path):
    for file in files:
        if file.lower().endswith(('.tif', '.bil')):
            full_path = os.path.join(root, file)
            file_paths.append(full_path)

# Create DataFrame with file paths
df = pd.DataFrame(file_paths, columns=['path'])

# Check if DataFrame is empty
if df.empty:
    print("No .tif or .bil files found in the specified folder.")
else:
    print(f"Found {len(df)} raster files.")

    # Step 2: Use gdalinfo to retrieve raster info and add to DataFrame
    raster_info = []

    for path in df['path']:
        try:
            # Run gdalinfo with -json flag to get structured output
            cmd = ['gdalinfo', '-json', path]
            result = subprocess.run(cmd, capture_output=True, text=True, check=True)
            
            # Parse JSON output
            info = json.loads(result.stdout)
            
            # Extract key information
            width = info.get('size', [None, None])[0]
            height = info.get('size', [None, None])[1]
            bands = len(info.get('bands', []))
            projection = info.get('coordinateSystem', {}).get('wkt', 'N/A')
            # Get No Data Value from the first band (if available)
            no_data = info.get('bands', [{}])[0].get('noDataValue', 'N/A')

            # Append extracted info as a dictionary
            raster_info.append({
                'width': width,
                'height': height,
                'bands': bands,
                'projection': projection,
                'no_data_value': no_data
            })
        
        except subprocess.CalledProcessError as e:
            print(f"Error processing {path}: {e.stderr}")
            raster_info.append({
                'width': None,
                'height': None,
                'bands': None,
                'projection': 'Error',
                'no_data_value': 'Error'
            })
        except json.JSONDecodeError:
            print(f"Could not parse gdalinfo output for {path}")
            raster_info.append({
                'width': None,
                'height': None,
                'bands': None,
                'projection': 'Parse Error',
                'no_data_value': 'Parse Error'
            })

    # Convert raster_info list to DataFrame and concatenate with original df
    info_df = pd.DataFrame(raster_info)
    df = pd.concat([df, info_df], axis=1)

    # Display the final DataFrame
    print("\nFinal DataFrame:")
    print(df)

    # Optionally save to CSV
    output_csv = os.path.join(folder_path, 'raster_info.csv')
    df.to_csv(output_csv, index=False)
    print(f"\nDataFrame saved to: {output_csv}")





import os
import pandas as pd
import subprocess
import json

# Get folder path from user
folder_path = input("Enter the folder path: ")

# Step 1: Walk through folder and create DataFrame with .tif and .bil file paths
file_paths = []
for root, dirs, files in os.walk(folder_path):
    for file in files:
        if file.lower().endswith(('.tif', '.bil')):
            full_path = os.path.join(root, file)
            file_paths.append(full_path)

df = pd.DataFrame(file_paths, columns=['path'])

if df.empty:
    print("No .tif or .bil files found in the specified folder.")
else:
    print(f"Found {len(df)} raster files.")

    # Step 2: Retrieve raster info with gdalinfo
    raster_info = []
    for path in df['path']:
        try:
            cmd = ['gdalinfo', '-json', path]
            result = subprocess.run(cmd, capture_output=True, text=True, check=True)
            info = json.loads(result.stdout)
            width = info.get('size', [None, None])[0]
            height = info.get('size', [None, None])[1]
            bands = len(info.get('bands', []))
            projection = info.get('coordinateSystem', {}).get('wkt', 'N/A')
            no_data = info.get('bands', [{}])[0].get('noDataValue', 'N/A')
            raster_info.append({
                'width': width,
                'height': height,
                'bands': bands,
                'projection': projection,
                'no_data_value': no_data
            })
        except subprocess.CalledProcessError as e:
            print(f"Error processing {path}: {e.stderr}")
            raster_info.append({
                'width': None,
                'height': None,
                'bands': None,
                'projection': 'Error',
                'no_data_value': 'Error'
            })
        except json.JSONDecodeError:
            print(f"Could not parse gdalinfo output for {path}")
            raster_info.append({
                'width': None,
                'height': None,
                'bands': None,
                'projection': 'Parse Error',
                'no_data_value': 'Parse Error'
            })

    df = pd.concat([df, pd.DataFrame(raster_info)], axis=1)

    # Step 3: Process rasters to create binary images and GeoJSON
    geojson_paths = []
    for index, row in df.iterrows():
        input_path = row['path']
        no_data = row['no_data_value']
        binary_output = input_path.replace('.tif', '_binary.tif').replace('.bil', '_binary.tif')
        geojson_output = input_path.replace('.tif', '_binary.geojson').replace('.bil', '_binary.geojson')

        try:
            # Check if no_data is valid and not 'N/A' or 'Error'
            if isinstance(no_data, (int, float)):
                # Use gdal_calc.py to create binary image (1 for valid pixels, 0 for No Data)
                calc_expr = f"(A!= {no_data}) * 1"
                cmd_calc = [
                    'gdal_calc.py',
                    '-A', input_path,
                    f'--outfile={binary_output}',
                    f'--calc={calc_expr}',
                    f'--NoDataValue={0}'  # Set No Data to 0 in the binary image
                ]
                subprocess.run(cmd_calc, check=True, capture_output=True, text=True)
                print(f"Created binary raster: {binary_output}")
            else:
                print(f"Skipping {input_path}: Invalid No Data Value ({no_data})")
                geojson_paths.append('N/A')
                continue

            # Convert binary raster to GeoJSON using gdal_polygonize.py
            cmd_poly = [
                'gdal_polygonize.py',
                binary_output,
                geojson_output,
                '-f', 'GeoJSON'
            ]
            subprocess.run(cmd_poly, check=True, capture_output=True, text=True)
            print(f"Created GeoJSON: {geojson_output}")
            geojson_paths.append(geojson_output)

        except subprocess.CalledProcessError as e:
            print(f"Error processing {input_path}: {e.stderr}")
            geojson_paths.append('Error')

    # Add GeoJSON paths to DataFrame
    df['geojson_path'] = geojson_paths

    # Display the final DataFrame
    print("\nFinal DataFrame:")
    print(df)

    # Save to CSV
    output_csv = os.path.join(folder_path, 'raster_info_with_geojson.csv')
    df.to_csv(output_csv, index=False)
    print(f"\nDataFrame saved to: {output_csv}")

