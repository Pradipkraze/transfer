import rasterio
from rasterio.warp import reproject, Resampling
from rasterio.enums import Resampling
import numpy as np


def resample_to_match(source_path, target_path, output_path, nodata_value=0):
    """
    Resample the source image to match the resolution, dimensions, and extent of the target image.

    Parameters:
        source_path (str): Path to the source image to be resampled.
        target_path (str): Path to the target image to match.
        output_path (str): Path to save the resampled image.
        nodata_value (int/float): No-data value for the source image.
    """
    with rasterio.open(source_path) as src, rasterio.open(target_path) as target:
        # Match the target resolution and dimensions
        dst_transform = target.transform
        dst_crs = target.crs
        dst_shape = target.shape
        
        # Create a profile for the resampled image
        profile = target.profile
        profile.update(dtype=src.dtypes[0], transform=dst_transform, height=dst_shape[0], width=dst_shape[1], nodata=nodata_value)

        # Resample the image
        with rasterio.open(output_path, 'w', **profile) as dst:
            for i in range(1, src.count + 1):
                # Create an empty array for the resampled data
                dst_data = np.empty(dst_shape, dtype=src.dtypes[0])

                # Perform the reprojection
                reproject(
                    source=rasterio.band(src, i),
                    destination=dst_data,
                    src_transform=src.transform,
                    src_crs=src.crs,
                    dst_transform=dst_transform,
                    dst_crs=dst_crs,
                    resampling=Resampling.bilinear,
                )

                # Write the resampled band
                dst.write(dst_data, i)


def mosaic_big_tiffs(image_a_path, image_b_path, output_path, nodata_value=0):
    """
    Mosaic two BigTIFF images, taking values from image_b for overlapping areas
    and ignoring `0` and no-data values in both images.

    Parameters:
        image_a_path (str): Path to the first image (a).
        image_b_path (str): Path to the second image (b).
        output_path (str): Path to save the output mosaic.
        nodata_value (int/float): Value to treat as no-data (default=0).
    """
    with rasterio.open(image_a_path) as src_a, rasterio.open(image_b_path) as src_b:
        # Ensure CRS matches
        if src_a.crs != src_b.crs:
            raise ValueError("Both images must have the same CRS.")

        print(f"Image A - CRS: {src_a.crs}, Pixel Size: {src_a.res}, Data Type: {src_a.dtypes[0]}")
        print(f"Image B - CRS: {src_b.crs}, Pixel Size: {src_b.res}, Data Type: {src_b.dtypes[0]}")

        # Read profiles and ensure consistent data type
        profile = src_a.profile
        profile.update(dtype='int16', nodata=nodata_value, bigtiff='YES')

        # Initialize the output file
        with rasterio.open(output_path, 'w', **profile) as dst:
            # Process in chunks
            for ji, window in src_a.block_windows(1):
                data_a = src_a.read(window=window, masked=True)
                data_b = src_b.read(window=window, masked=True)

                # Initialize result array
                result = np.array(data_a, dtype=np.int16)

                # Create valid mask for data_b
                valid_b = (data_b != nodata_value) & (~data_b.mask)

                # Update result with values from data_b
                result[valid_b] = data_b[valid_b]

                # Write result to output
                dst.write(result, window=window)

    print(f"Mosaic created successfully at {output_path}")


# Example Usage
image_a_path = "path_to_image_a.tif"
image_b_path = "path_to_image_b.tif"
resampled_image_b_path = "resampled_image_b.tif"
output_path = "path_to_output_mosaic.tif"

# Resample Image B to match Image A
resample_to_match(image_b_path, image_a_path, resampled_image_b_path)

# Perform Mosaic
mosaic_big_tiffs(image_a_path, resampled_image_b_path, output_path)
