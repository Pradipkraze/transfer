import rasterio
from rasterio.warp import reproject, Resampling
from rasterio.enums import Resampling as ResamplingEnum
from rasterio.io import MemoryFile
import numpy as np

# Define the paths to your image files
image_a_path = "path_to_image_a.tif"
image_b_path = "path_to_image_b.tif"
resampled_a_path = "resampled_image_a.tif"
mosaic_output_path = "mosaic_output.tif"

# Open image b to get its size and CRS
with rasterio.open(image_b_path) as src_b:
    b_crs = src_b.crs
    b_transform = src_b.transform
    b_width = src_b.width
    b_height = src_b.height
    b_pixel_size = (b_transform[0], -b_transform[4])
    b_block_shape = src_b.block_shapes[0]  # Block size for efficient reads
    b_nodata = src_b.nodata

# Open image a and resample it to the dimensions of image b
with rasterio.open(image_a_path) as src_a:
    a_crs = src_a.crs
    a_transform = src_a.transform
    a_pixel_size = (a_transform[0], -a_transform[4])
    a_nodata = src_a.nodata

    # Create a MemoryFile to store resampled image a temporarily
    with MemoryFile() as memfile:
        with memfile.open(
            driver="GTiff",
            height=b_height,
            width=b_width,
            count=1,
            dtype=src_a.dtypes[0],
            crs=b_crs,
            transform=b_transform,
            nodata=a_nodata,
            BIGTIFF="YES"
        ) as resampled_a:
            # Process resampling in chunks
            for ji, window in resampled_a.block_windows(1):
                a_data = src_a.read(1, window=window)
                resampled_data = np.zeros((window.height, window.width), dtype=src_a.dtypes[0])
                reproject(
                    source=a_data,
                    destination=resampled_data,
                    src_transform=src_a.window_transform(window),
                    src_crs=a_crs,
                    dst_transform=resampled_a.window_transform(window),
                    dst_crs=b_crs,
                    resampling=ResamplingEnum.nearest
                )
                resampled_a.write(resampled_data, 1, window=window)

        # Read the entire resampled data for mosaicking
        resampled_a_data = resampled_a.read(1)

# Open image b data in chunks and perform mosaicking
with rasterio.open(image_b_path) as src_b, rasterio.open(
    mosaic_output_path, "w",
    driver="GTiff",
    height=b_height,
    width=b_width,
    count=1,
    dtype=src_b.dtypes[0],
    crs=b_crs,
    transform=b_transform,
    nodata=0,
    BIGTIFF="YES"
) as mosaic:
    for ji, window in src_b.block_windows(1):
        b_data = src_b.read(1, window=window)
        resampled_chunk = resampled_a_data[window.row_off:window.row_off + window.height,
                                           window.col_off:window.col_off + window.width]

        mosaic_chunk = np.where(
            (b_data != b_nodata) & (b_data != 0),
            b_data,
            np.where(
                (resampled_chunk != a_nodata) & (resampled_chunk != 0),
                resampled_chunk,
                0
            )
        )

        mosaic.write(mosaic_chunk, 1, window=window)

# Print pixel size and CRS for both images
print("Image A - Pixel Size:", a_pixel_size, "CRS:", a_crs)
print("Image B - Pixel Size:", b_pixel_size, "CRS:", b_crs)
