import rasterio
from rasterio.warp import reproject, calculate_default_transform, Resampling
from rasterio.merge import merge
import numpy as np

# Function to resample a raster file to match the pixel size of another raster file
def resample_raster(source_path, target_path, output_path):
    with rasterio.open(source_path) as src:
        src_data = src.read(1)
        src_transform = src.transform

        with rasterio.open(target_path) as target:
            target_transform = target.transform
            target_crs = target.crs
            target_res = target.res

            # Calculate new transform and dimensions
            new_transform, width, height = calculate_default_transform(
                src.crs, target_crs, src.width, src.height, resolution=target_res
            )

            # Resampling
            resampled_data = np.empty((height, width), dtype=np.int16)
            reproject(
                source=src_data,
                destination=resampled_data,
                src_transform=src_transform,
                src_crs=src.crs,
                dst_transform=new_transform,
                dst_crs=target_crs,
                resampling=Resampling.nearest
            )

            # Write the resampled file
            profile = src.profile
            profile.update({
                'transform': new_transform,
                'height': height,
                'width': width
            })

            with rasterio.open(output_path, 'w', **profile) as dst:
                dst.write(resampled_data, 1)

# Function to create a new raster with updated dimensions based on another raster
def create_new_dim_raster(source_path, ref_path, output_path):
    with rasterio.open(ref_path) as ref:
        ref_transform = ref.transform
        ref_shape = (ref.height, ref.width)

        with rasterio.open(source_path) as src:
            src_data = src.read(1)
            src_nodata = src.nodata

            # Prepare new data array
            new_data = np.full(ref_shape, src_nodata, dtype=np.int16)

            # Update metadata to match the reference raster
            profile = src.profile
            profile.update({
                'transform': ref_transform,
                'height': ref_shape[0],
                'width': ref_shape[1]
            })

            # Write the new raster
            with rasterio.open(output_path, 'w', **profile) as dst:
                dst.write(new_data, 1)

# Function to create a mosaic using two raster files
def create_mosaic(raster_a_path, raster_b_path, output_path):
    with rasterio.open(raster_a_path) as src_a:
        data_a = src_a.read(1)
        nodata_a = src_a.nodata

        with rasterio.open(raster_b_path) as src_b:
            data_b = src_b.read(1)
            nodata_b = src_b.nodata

            # Create mosaic: use B's value if it's not nodata, otherwise use A's value
            mosaic_data = np.where(data_b != nodata_b, data_b, data_a)

            # Update profile for output
            profile = src_a.profile
            profile.update({
                'BIGTIFF': 'YES'
            })

            # Write the mosaic file
            with rasterio.open(output_path, 'w', **profile) as dst:
                dst.write(mosaic_data, 1)

# Paths to input and output files
image_a = "image_a.tif"
image_b = "image_b.tif"
a_resample = "a_resample.tif"
b_new_dim = "b_new_dim.tif"
mosaic_output = "mosaic.tif"

# Process the images
resample_raster(image_a, image_b, a_resample)
create_new_dim_raster(image_b, a_resample, b_new_dim)
create_mosaic(a_resample, b_new_dim, mosaic_output)
