import geopandas as gpd
from shapely.geometry import Point, LineString, Polygon
from shapely.ops import split
import folium
import matplotlib.pyplot as plt

# Step 1: Load the building polygon shapefile
# Replace 'building.shp' with your shapefile path
building_gdf = gpd.read_file('building.shp')

# Ensure the CRS is projected (meters), e.g., UTM. If not, reproject it.
if not building_gdf.crs.is_projected:
    # Example: Reproject to a common UTM zone (adjust EPSG code as needed)
    building_gdf = building_gdf.to_crs(epsg=32633)  # UTM Zone 33N as an example

# Extract the building polygon
building_polygon = building_gdf.geometry.iloc[0]

# Step 2: Define tower and observer positions
# Assume tower is at the centroid of the polygon (adjust as needed)
tower_base = building_polygon.centroid
tower_x, tower_y = tower_base.x, tower_base.y

# Observer 300 meters away (assume along x-axis for simplicity; adjust direction if needed)
observer = Point(tower_x - 300, tower_y)

# Tower top is 5 meters above rooftop (height not used in 2D map, but for logic)
tower_top = Point(tower_x, tower_y)  # 2D representation

# Step 3: Line-of-sight and critical distance
# Critical distance where line-of-sight hits rooftop height (10m) = 200m
critical_distance = 200
hidden_boundary = LineString([(tower_x - 200, tower_y - 1000), (tower_x - 200, tower_y + 1000)])  # Vertical line, extended

# Step 4: Split the polygon to find the hidden area
split_result = split(building_polygon, hidden_boundary)
hidden_area = None
for geom in split_result.geoms:
    if geom.centroid.x < tower_x - 100:  # Closer to observer
        hidden_area = geom
        break

# Step 5: Calculate area
if hidden_area:
    area_m2 = hidden_area.area
    print(f"Hidden area: {area_m2:.2f} square meters")
else:
    print("No hidden area found.")

# Step 6: Create an interactive map with Folium
# Center the map on the building centroid
map_center = [tower_y, tower_x]  # Folium uses [lat, lon]
m = folium.Map(location=map_center, zoom_start=15, tiles="OpenStreetMap")

# Convert geometries to lat/lon for Folium (if not already in WGS84)
if building_gdf.crs != "epsg:4326":
    building_gdf_wgs84 = building_gdf.to_crs(epsg=4326)
    building_polygon_wgs84 = building_gdf_wgs84.geometry.iloc[0]
    tower_base_wgs84 = building_polygon_wgs84.centroid
    observer_wgs84 = Point(tower_base_wgs84.x - 300 * 0.000009, tower_base_wgs84.y)  # Approx meters to degrees
    if hidden_area:
        hidden_area_wgs84 = hidden_area.to_crs(epsg=4326)
else:
    building_polygon_wgs84 = building_polygon
    tower_base_wgs84 = tower_base
    observer_wgs84 = observer
    hidden_area_wgs84 = hidden_area

# Add building polygon to the map
folium.GeoJson(
    building_polygon_wgs84.__geo_interface__,
    style_function=lambda x: {"fillColor": "blue", "color": "blue", "weight": 2, "fillOpacity": 0.3},
    name="Building"
).add_to(m)

# Add hidden area (if exists)
if hidden_area:
    folium.GeoJson(
        hidden_area_wgs84.__geo_interface__,
        style_function=lambda x: {"fillColor": "green", "color": "green", "weight": 2, "fillOpacity": 0.5},
        name="Hidden Area"
    ).add_to(m)

# Add observer and tower markers
folium.Marker(
    [observer_wgs84.y, observer_wgs84.x],  # [lat, lon]
    popup="Observer",
    icon=folium.Icon(color="red")
).add_to(m)

folium.Marker(
    [tower_base_wgs84.y, tower_base_wgs84.x],
    popup="Tower",
    icon=folium.Icon(color="purple")
).add_to(m)

# Add line-of-sight
line_of_sight = LineString([observer_wgs84, tower_base_wgs84])
folium.PolyLine(
    locations=[[point[1], point[0]] for point in line_of_sight.coords],  # [lat, lon]
    color="red",
    weight=2,
    opacity=0.8,
    name="Line of Sight"
).add_to(m)

# Add layer control
folium.LayerControl().add_to(m)

# Save and display the map
m.save("visibility_map.html")
print("Map saved
Open 'visibility_map.html' in a browser to view the interactive map.")

# Optional: Static plot for reference (similar to previous script)
fig, ax = plt.subplots()
x, y = building_polygon.exterior.xy
ax.plot(x, y, label="Building", color="blue")
if hidden_area:
    x, y = hidden_area.exterior.xy
    ax.plot(x, y, label="Hidden Area", color="green", linestyle="--")
ax.plot([observer.x, tower_x], [observer.y, tower_y], "r:", label="Line of Sight")
ax.plot([tower_x], [tower_y], "ro", label="Tower")
ax.set_xlabel("X (m)")
ax.set_ylabel("Y (m)")
ax.legend()
plt.title("Visibility Analysis (Projected CRS)")
plt.show()
