import rasterio
from rasterio.merge import merge
from rasterio.mask import mask
import numpy as np

def mosaic_big_tiffs(image_a_path, image_b_path, output_path, nodata_value=0):
    """
    Mosaic two BigTIFF images, taking values from image_b for overlapping areas
    and ignoring `0` and no-data values in both images.

    Parameters:
        image_a_path (str): Path to the first image (a).
        image_b_path (str): Path to the second image (b).
        output_path (str): Path to save the output mosaic.
        nodata_value (int/float): Value to treat as no-data (default=0).
    """
    # Open both images
    with rasterio.open(image_a_path) as src_a, rasterio.open(image_b_path) as src_b:
        # Check CRS and pixel sizes
        print(f"Image A - CRS: {src_a.crs}, Pixel Size: {src_a.res}")
        print(f"Image B - CRS: {src_b.crs}, Pixel Size: {src_b.res}")

        # Ensure both images have the same CRS and resolution
        if src_a.crs != src_b.crs or src_a.res != src_b.res:
            raise ValueError("Both images must have the same CRS and pixel size.")

        # Read data lazily using generators
        profile = src_a.profile
        profile.update(dtype=rasterio.float32, nodata=nodata_value, bigtiff='YES')

        with rasterio.open(output_path, 'w', **profile) as dst:
            # Process in chunks
            for ji, window in src_a.block_windows(1):
                # Read the same window from both images
                data_a = src_a.read(window=window, masked=True)
                data_b = src_b.read(window=window, masked=True)
                
                # Initialize the result array
                result = np.array(data_a, dtype=np.float32)
                
                # Update result: Prioritize data_b values over data_a
                valid_b = (data_b != nodata_value) & (~data_b.mask)
                result[valid_b] = data_b[valid_b]
                
                # Write the result back to the output file
                dst.write(result, window=window)

    print(f"Mosaic created successfully at {output_path}")


# Example usage
image_a_path = "path_to_image_a.tif"
image_b_path = "path_to_image_b.tif"
output_path = "path_to_output_mosaic.tif"

mosaic_big_tiffs(image_a_path, image_b_path, output_path)
