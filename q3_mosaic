import rasterio
from rasterio.warp import calculate_default_transform, reproject, Resampling
from rasterio.enums import Resampling as RioResampling
from rasterio.merge import merge
import numpy as np

def get_pixel_size(image_path):
    with rasterio.open(image_path) as src:
        return src.transform.a, abs(src.transform.e)  # pixel width, pixel height

def resample_image(input_path, output_path, target_pixel_size):
    with rasterio.open(input_path) as src:
        transform, width, height = calculate_default_transform(
            src.crs, src.crs, src.width, src.height, 
            resolution=target_pixel_size
        )
        profile = src.profile
        profile.update(
            transform=transform, width=width, height=height, compress='lzw', BIGTIFF='YES'
        )

        with rasterio.open(output_path, 'w', **profile) as dst:
            for i in range(1, src.count + 1):
                reproject(
                    source=rasterio.band(src, i),
                    destination=rasterio.band(dst, i),
                    src_transform=src.transform,
                    src_crs=src.crs,
                    dst_transform=transform,
                    dst_crs=src.crs,
                    resampling=RioResampling.bilinear
                )

def adjust_extent_and_fill(input_path, reference_path, output_path):
    with rasterio.open(input_path) as src:
        with rasterio.open(reference_path) as ref:
            profile = ref.profile
            profile.update(dtype=src.dtypes[0], compress='lzw', BIGTIFF='YES')

            with rasterio.open(output_path, 'w', **profile) as dst:
                for i in range(1, src.count + 1):
                    data = np.zeros((ref.height, ref.width), dtype=src.dtypes[0])

                    reproject(
                        source=rasterio.band(src, i),
                        destination=data,
                        src_transform=src.transform,
                        src_crs=src.crs,
                        dst_transform=ref.transform,
                        dst_crs=ref.crs,
                        resampling=RioResampling.nearest
                    )
                    dst.write(data, i)

def create_mosaic(image1_path, image2_path, output_path):
    with rasterio.open(image1_path) as src1, rasterio.open(image2_path) as src2:
        profile = src1.profile
        profile.update(compress='lzw', BIGTIFF='YES')

        mosaic, transform = merge(
            [src2, src1], method='first', nodata=src1.nodata
        )

        with rasterio.open(output_path, 'w', **profile) as dst:
            dst.write(mosaic)

if __name__ == "__main__":
    image_A = "path/to/image_A.tif"
    image_B = "path/to/image_B.tif"

    # Get pixel size of Image B
    pixel_size = get_pixel_size(image_B)

    # Resample Image A to match pixel size of Image B
    resampled_A = "path/to/A_resample.tif"
    resample_image(image_A, resampled_A, pixel_size)

    # Adjust Image B to match the extent of resampled A
    adjusted_B = "path/to/B_new_dim.tif"
    adjust_extent_and_fill(image_B, resampled_A, adjusted_B)

    # Create mosaic
    mosaic_output = "path/to/mosaic_output.tif"
    create_mosaic(resampled_A, adjusted_B, mosaic_output)

    print(f"Mosaic created at {mosaic_output}")
