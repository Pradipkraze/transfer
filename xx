import os
import glob
import rasterio
from rasterio.windows import Window
from rasterio.enums import Resampling
from rasterio.merge import merge

# Define input folder and output file
input_folder = "path/to/folder1"
output_file = "merged.tif"

# Find all .tif files in the folder
tif_files = glob.glob(os.path.join(input_folder, "*.tif"))

if len(tif_files) == 0:
    raise FileNotFoundError("No .tif files found in the specified folder.")

# Open all input files as datasets
src_files = [rasterio.open(f) for f in tif_files]

# Create a merged raster's metadata by calculating the bounds and dimensions
mosaic, out_transform = merge(src_files, method="first", resampling=Resampling.nearest, indexes=None)
out_meta = src_files[0].meta.copy()
out_meta.update({
    "driver": "GTiff",
    "height": mosaic.shape[1],
    "width": mosaic.shape[2],
    "transform": out_transform,
    "count": src_files[0].count,  # Number of bands from the first file
    "BIGTIFF": "YES",
    "compress": "LZW",
    "tiled": True,
})

# Write merged raster band-by-band and tile-by-tile to minimize memory usage
with rasterio.open(output_file, "w", **out_meta) as dest:
    for band_idx in range(1, out_meta["count"] + 1):
        print(f"Processing band {band_idx}...")
        for ji, window in dest.block_windows(1):  # Iterate through tiles
            data = []
            for src in src_files:
                data.append(src.read(band_idx, window=window, resampling=Resampling.nearest))
            # Merge tile data across files
            merged_tile = sum(data)  # Modify this logic as needed for merging strategy
            dest.write(merged_tile, indexes=band_idx, window=window)

# Close all source files
for src in src_files:
    src.close()

print(f"RAM-efficient BigTIFF file created: {output_file}")
